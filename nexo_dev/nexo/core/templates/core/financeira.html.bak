{% extends 'base.html' %} {% load static %} {% block title %}
Financeira{% endblock %} {% block extra_css %}
<style>
  body {
    scroll-behavior: smooth;
    overflow-y: auto;
  }

  /* Container principal */
  .financeira-container {
    position: relative;
    height: auto;
    min-height: 500px;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    background-color: #f5f5f5;
    overflow-y: visible;
    margin-bottom: 40px;
    padding-bottom: 20px;
    transition: background-color 0.3s ease, border-color 0.3s ease;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.05);
  }

  /* Estilos para modo escuro */
  body.dark-mode .financeira-container {
    background-color: #121212;
    border-color: #222222;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
  }

  /* Painéis e controles */
  .controls-panel {
    background-color: white;
    border-bottom: 1px solid #e0e0e0;
    padding: 15px;
    display: flex;
    gap: 10px;
    align-items: center;
    flex-wrap: wrap;
    transition: background-color 0.3s ease, border-color 0.3s ease;
    position: sticky;
    top: 0;
    z-index: 100;
  }

  body.dark-mode .controls-panel {
    background-color: #2d2d2d;
    border-color: #444;
  }

  /* Dashboard financeiro */
  .dashboard-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    gap: 20px;
    padding: 20px;
  }

  .card-financial {
    background-color: white;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .card-financial:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
  }

  .card-header {
    padding: 15px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #e0e0e0;
    font-weight: 500;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .card-body {
    padding: 20px;
  }

  /* Gráficos */
  .chart-container {
    height: 250px;
    position: relative;
  }

  /* Tabelas */
  .table-financeira {
    width: 100%;
    border-collapse: collapse;
  }

  .table-financeira th,
  .table-financeira td {
    padding: 10px;
    border-bottom: 1px solid #e0e0e0;
  }

  .table-financeira th {
    background-color: #f8f9fa;
    font-weight: 500;
    text-align: left;
  }

  .table-financeira tr:hover {
    background-color: #f8f9fa;
  }

  /* Integrações */
  .integracao-container {
    padding: 20px;
    background-color: #f8f9fa;
    border-radius: 0 0 8px 8px;
    border-top: 1px solid #e0e0e0;
    margin-top: 20px;
    scroll-margin-top: 70px;
  }

  .integracao-heading {
    font-size: 1.5rem;
    margin-bottom: 15px;
    color: #333;
    font-weight: 500;
  }

  .integracao-tabs {
    margin-top: 10px;
    border-bottom: 1px solid #dee2e6;
    display: flex;
    gap: 10px;
    padding: 0 10px;
  }

  .integracao-tab {
    padding: 10px 15px;
    cursor: pointer;
    border: 1px solid transparent;
    border-top-left-radius: 4px;
    border-top-right-radius: 4px;
    margin-bottom: -1px;
  }

  .integracao-tab.active {
    border-color: #dee2e6 #dee2e6 #fff;
    background-color: #fff;
  }

  .integracao-content {
    display: none;
    padding: 20px;
    border: 1px solid #e6e6e6;
    border-top: none;
    border-radius: 0 0 8px 8px;
    background-color: white;
    min-height: 300px;
  }
  
  body.dark-mode .integracao-content {
    background-color: #1a1a1a;
    border-color: #333;
  }

  .integracao-content.active {
    display: block;
  }
  
  .integracao-wrapper {
    height: 350px;
    overflow-y: auto;
    padding: 15px;
    border-radius: 4px;
    background-color: #f9f9f9;
    scrollbar-width: thin;
    scrollbar-color: #ccc #f9f9f9;
  }
  
  .integracao-wrapper::-webkit-scrollbar {
    width: 8px;
  }
  
  .integracao-wrapper::-webkit-scrollbar-track {
    background: #f9f9f9;
  }
  
  .integracao-wrapper::-webkit-scrollbar-thumb {
    background-color: #ccc;
    border-radius: 4px;
  }
  
  body.dark-mode .integracao-wrapper {
    background-color: #222;
    scrollbar-color: #444 #222;
  }
  
  body.dark-mode .integracao-wrapper::-webkit-scrollbar-track {
    background: #222;
  }
  
  body.dark-mode .integracao-wrapper::-webkit-scrollbar-thumb {
    background-color: #444;
  }

  /* Estilos para modo escuro */
  body.dark-mode .card-financial {
    background-color: #1a1a1a;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
  }

  body.dark-mode .card-header {
    background-color: #2d2d2d;
    border-color: #333;
    color: #e0e0e0;
  }

  body.dark-mode .card-body {
    color: #e0e0e0;
  }

  body.dark-mode .table-financeira th,
  body.dark-mode .table-financeira td {
    border-color: #333;
  }

  body.dark-mode .table-financeira th {
    background-color: #2d2d2d;
    color: #e0e0e0;
  }

  body.dark-mode .table-financeira tr:hover {
    background-color: #2d2d2d;
  }

  body.dark-mode .integracao-tab.active {
    background-color: #1a1a1a;
    border-color: #333 #333 #1a1a1a;
    color: #e0e0e0;
  }

  body.dark-mode .integracao-content {
    scrollbar-color: #444 #222;
  }

  body.dark-mode .integracao-container {
    border-color: #333;
  }

  /* Indicadores */
  .indicador {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
  }

  .indicador-valor {
    font-size: 24px;
    font-weight: 600;
    margin-right: 10px;
  }

  .indicador-texto {
    font-size: 14px;
    color: #666;
  }

  .indicador-positivo {
    color: #28a745;
  }

  .indicador-negativo {
    color: #dc3545;
  }

  body.dark-mode .indicador-texto {
    color: #aaa;
  }
</style>
{% endblock %} {% block content %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <h2 class="mb-4">Análise Financeira</h2>
      <div class="financeira-container">
        <!-- Mensagem de erro da API -->
        <div id="apiErrorMessage" class="alert alert-danger alert-dismissible fade show m-3" style="display: none;" role="alert">
          <i class="fas fa-exclamation-circle me-2"></i>
          <span id="apiErrorText">Erro ao carregar dados financeiros. Verifique o console para mais detalhes.</span>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
        
        <div class="controls-panel">
          <div class="btn-group">
            <button class="btn btn-outline-primary" id="btnOrganograma">
              <i class="fas fa-sitemap me-2"></i>Organograma
            </button>
            <button class="btn btn-outline-primary" id="btnSimulacao">
              <i class="fas fa-project-diagram me-2"></i>Simulação
            </button>
          </div>
          <div class="dropdown ms-2">
            <button
              class="btn btn-outline-secondary dropdown-toggle"
              type="button"
              id="periodoDropdown"
              data-bs-toggle="dropdown"
              aria-expanded="false"
            >
              <i class="fas fa-calendar-alt me-2"></i>Período
            </button>
            <ul class="dropdown-menu" aria-labelledby="periodoDropdown">
              <li><a class="dropdown-item" href="#">Mês Atual</a></li>
              <li><a class="dropdown-item" href="#">Trimestre Atual</a></li>
              <li><a class="dropdown-item" href="#">Ano Atual</a></li>
              <li><hr class="dropdown-divider" /></li>
              <li><a class="dropdown-item" href="#">Personalizado</a></li>
            </ul>
          </div>
          <div class="ms-auto d-flex gap-2">
            <button class="btn btn-outline-primary" id="btnIntegracao">
              <i class="fas fa-link me-2"></i>Ir para Integração
            </button>
            <button class="btn btn-success" id="btnExportar">
              <i class="fas fa-file-export me-2"></i>Exportar
            </button>
          </div>
        </div>

        <div class="dashboard-grid">
          <!-- Resumo Financeiro -->
          <div class="card-financial">
            <div class="card-header">
              <span>Resumo Financeiro</span>
            </div>
            <div class="card-body">
              <div class="indicador">
                <div class="indicador-valor">R$ 2.450.000</div>
                <div class="indicador-texto">Orçamento Total</div>
              </div>
              <div class="indicador">
                <div class="indicador-valor">R$ 1.320.500</div>
                <div class="indicador-texto">
                  Utilizado
                  <span class="badge bg-info">54%</span>
                </div>
              </div>
              <div class="indicador">
                <div class="indicador-valor indicador-positivo">
                  <i class="fas fa-arrow-up"></i> 12%
                </div>
                <div class="indicador-texto">Comparado ao período anterior</div>
              </div>
            </div>
          </div>

          <!-- Gráfico de Distribuição Orçamentária -->
          <div class="card-financial">
            <div class="card-header">
              <span>Distribuição por Unidade</span>
            </div>
            <div class="card-body">
              <div class="chart-container" id="chartDistribuicao"></div>
            </div>
          </div>

          <!-- Execução Orçamentária -->
          <div class="card-financial">
            <div class="card-header">
              <span>Execução Orçamentária</span>
            </div>
            <div class="card-body">
              <div class="chart-container" id="chartExecucao"></div>
            </div>
          </div>

          <!-- Tabela de Unidades -->
          <div class="card-financial" style="grid-column: span 2">
            <div class="card-header">
              <span>Detalhamento por Unidade</span>
              <div>
                <button class="btn btn-sm btn-outline-primary" id="btnFiltrar">
                  <i class="fas fa-filter me-1"></i>Filtrar
                </button>
              </div>
            </div>
            <div class="card-body">
              <div class="table-responsive">
                <table class="table-financeira">
                  <thead>
                    <tr>
                      <th>Unidade</th>
                      <th>Orçamento</th>
                      <th>Executado</th>
                      <th>%</th>
                      <th>Status</th>
                    </tr>
                  </thead>
                  <tbody id="tabelaUnidades">
                    <tr>
                      <td>Secretaria de Administração</td>
                      <td>R$ 620.000</td>
                      <td>R$ 420.500</td>
                      <td>67.8%</td>
                      <td>
                        <span class="badge bg-success">Adequado</span>
                      </td>
                    </tr>
                    <tr>
                      <td>Secretaria de Educação</td>
                      <td>R$ 980.000</td>
                      <td>R$ 560.300</td>
                      <td>57.2%</td>
                      <td>
                        <span class="badge bg-success">Adequado</span>
                      </td>
                    </tr>
                    <tr>
                      <td>Secretaria de Saúde</td>
                      <td>R$ 850.000</td>
                      <td>R$ 339.700</td>
                      <td>40.0%</td>
                      <td>
                        <span class="badge bg-warning">Atenção</span>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>

        <!-- Integração com Organograma e Simulação -->
        <div class="integracao-container">
          <h4 class="integracao-heading">Integração</h4>
          <div class="integracao-tabs">
            <div class="integracao-tab active" data-tab="organograma">
              Organograma
            </div>
            <div class="integracao-tab" data-tab="simulacao">Simulação</div>
          </div>
          <div class="integracao-content active" id="organograma-content">
            <div class="alert alert-info">
              <i class="fas fa-info-circle me-2"></i>
              Visualize o impacto financeiro diretamente no organograma da
              instituição.
            </div>
            <div class="integracao-wrapper mt-3">
              <div id="organograma-financeiro"></div>
            </div>
          </div>
          <div class="integracao-content" id="simulacao-content">
            <div class="alert alert-info">
              <i class="fas fa-info-circle me-2"></i>
              Execute simulações financeiras com diferentes cenários
              organizacionais.
            </div>
            <div class="row g-3">
              <div class="col-md-4">
                <label class="form-label">Cenário</label>
                <select class="form-select" id="cenarioSimulacao">
                  <option value="atual">Estrutura Atual</option>
                  <option value="otimizado">Estrutura Otimizada</option>
                  <option value="expandido">Expansão Prevista</option>
                </select>
              </div>
              <div class="col-md-4">
                <label class="form-label">Ajuste Orçamentário</label>
                <div class="input-group">
                  <input
                    type="number"
                    class="form-control"
                    id="ajusteOrcamento"
                    value="0"
                  />
                  <span class="input-group-text">%</span>
                </div>
              </div>
              <div class="col-md-4 d-flex align-items-end">
                <button class="btn btn-primary w-100" id="btnSimular" onclick="simularCenarioFinanceiro(); return false;">
                  <i class="fas fa-play me-2"></i>Simular
                </button>
              </div>
            </div>
            <div class="integracao-wrapper mt-3">
              <div id="simulacao-resultados"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock %} {% block extra_js %}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/d3@7"></script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Adicionar manipulador de eventos para carregar dados imediatamente
    console.log("Página carregou, inicializando dados...");
    
    // Forçar carregamento imediato dos dados de backup
    carregarDadosBackup();
    
    // Manipular botão OK do modal de erro
    document.querySelectorAll('[data-bs-dismiss="modal"]').forEach(btn => {
      btn.addEventListener('click', function() {
        const modal = bootstrap.Modal.getInstance(document.querySelector('.modal.show'));
        if (modal) {
          modal.hide();
        }
        
        // Tentar carregar dados de backup
        carregarDadosBackup();
      });
    });
    
    // Verificar se há mensagem de erro de API no URL
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.has('erro')) {
      const mensagemErro = document.getElementById('apiErrorMessage');
      mensagemErro.style.display = 'block';
      document.getElementById('apiErrorText').textContent = 'Erro ao carregar dados financeiros: ' + urlParams.get('erro');
      
      // Carregar dados de backup automaticamente
      carregarDadosBackup();
    } else {
      // Carregar dados financeiros
      carregarDadosFinanceiros();
    }

    // Funcionalidade das abas de integração
    document.querySelectorAll(".integracao-tab").forEach((tab) => {
      tab.addEventListener("click", function () {
        // Remove classe ativa de todas as abas
        document
          .querySelectorAll(".integracao-tab")
          .forEach((t) => t.classList.remove("active"));
        
        // Remove classe ativa de todos os conteúdos
        document
          .querySelectorAll(".integracao-content")
          .forEach((c) => c.classList.remove("active"));
        
        // Adiciona classe ativa na aba clicada
        this.classList.add("active");
        
        // Mostra o conteúdo correspondente
        const tabId = this.getAttribute("data-tab");
        const contentElement = document.getElementById(tabId + "-content");
        if (contentElement) {
          contentElement.classList.add("active");
          
          // Carrega automaticamente o organograma quando a aba é selecionada
          if (tabId === "organograma") {
            carregarOrganogramaFinanceiro();
          } else if (tabId === "simulacao") {
            // Redefine o resultado da simulação quando a aba é selecionada
            document.getElementById("simulacao-resultados").innerHTML = '';
          }
        } else {
          console.error("Conteúdo correspondente não encontrado:", tabId + "-content");
        }
      });
    });
    
    // Botão para navegar até a seção de integração
    document.getElementById("btnIntegracao").addEventListener("click", function() {
      document.querySelector('.integracao-container').scrollIntoView({ 
        behavior: 'smooth', 
        block: 'start' 
      });
    });

    // Botões de navegação
    document.getElementById("btnOrganograma").addEventListener("click", () => {
      window.location.href = "{% url 'organograma' %}";
    });

    document.getElementById("btnSimulacao").addEventListener("click", () => {
      window.location.href = "{% url 'simulacao' %}";
    });

    // Carregar organograma financeiro
    document
      .getElementById("btnCarregarOrganograma")
      .addEventListener("click", carregarOrganogramaFinanceiro);

    // Simular cenários
    const btnSimular = document.getElementById("btnSimular");
    if (btnSimular) {
      console.log("Botão de simulação encontrado, adicionando evento de clique");
      btnSimular.addEventListener("click", function() {
        console.log("Botão de simulação clicado");
        simularCenarioFinanceiro();
      });
    } else {
      console.error("Botão de simulação não encontrado");
    }
      
    // Botão exportar
    document
      .getElementById("btnExportar")
      .addEventListener("click", exportarDados);
      
    // Dropdown de período
    document.querySelectorAll(".dropdown-item").forEach(item => {
      item.addEventListener("click", function(e) {
        e.preventDefault();
        const periodoSelecionado = this.textContent.trim();
        document.getElementById("periodoDropdown").innerHTML = 
          `<i class="fas fa-calendar-alt me-2"></i>${periodoSelecionado}`;
        
        // Recarregar dados com o novo período
        carregarDadosFinanceiros(periodoSelecionado);
      });
    });

    // Carregar dados financeiros e organograma assim que a página carregar
    carregarDadosFinanceiros();
    
    // Carregar organograma financeiro automaticamente na inicialização
    carregarOrganogramaFinanceiro();
  });
  
  function carregarDadosFinanceiros(periodo = "Mês Atual") {
    // Remover a mensagem de erro caso esteja visível
    const mensagemErro = document.getElementById('apiErrorMessage');
    mensagemErro.style.display = 'none';
    
    // Mostrar indicador de carregamento
    document.querySelectorAll(".chart-container").forEach(container => {
      container.innerHTML = '<div class="d-flex justify-content-center align-items-center h-100"><div class="spinner-border text-primary" role="status"></div></div>';
    });
    
    // Construir query params para o período selecionado
    const params = new URLSearchParams();
    params.append('periodo', periodo);
    
    // Definir timeout para a requisição
    const timeout = setTimeout(() => {
      console.warn("Timeout ao carregar dados, exibindo dados de backup");
      carregarDadosBackup();
    }, 10000); // 10 segundos de timeout
    
    fetch(`{% url 'financeira_data' %}?${params.toString()}`)
      .then(response => {
        console.log("Resposta recebida:", response.status);
        clearTimeout(timeout);
        if (!response.ok) {
          throw new Error(`Erro HTTP ${response.status}: ${response.statusText}`);
        }
        return response.json();
      })
      .then(data => {
        console.log("Dados recebidos:", data);
        if (!data || typeof data !== 'object') {
          throw new Error('Formato de dados inválido recebido do servidor');
        }
        
        // Se a resposta indicar dados de backup, mostrar uma notificação sutil
        if (data.is_backup_data) {
          const backupNotification = document.createElement('div');
          backupNotification.className = 'alert alert-warning alert-dismissible fade show m-2';
          backupNotification.innerHTML = `
            <i class="fas fa-exclamation-triangle me-2"></i>
            Exibindo dados de backup. Os servidores podem estar sobrecarregados.
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
          `;
          document.querySelector('.financeira-container').prepend(backupNotification);
          
          // Remover a notificação após 10 segundos
          setTimeout(() => {
            if (document.body.contains(backupNotification)) {
              backupNotification.remove();
            }
          }, 10000);
        }
        
        try {
          // Atualizar os indicadores
          document.querySelector(".indicador-valor:nth-child(1)").textContent = 
            "R$ " + (data.orcamento_total || 0).toLocaleString("pt-BR");
          document.querySelector(".indicador-valor:nth-child(3)").textContent = 
            "R$ " + (data.executado_total || 0).toLocaleString("pt-BR");
            
          const percentual = data.orcamento_total ? Math.round((data.executado_total / data.orcamento_total) * 100) : 0;
          document.querySelector(".badge.bg-info").textContent = percentual + "%";
          
          // Atualizar indicador de variação
          const indicadorVariacao = document.querySelector(".indicador-valor.indicador-positivo, .indicador-valor.indicador-negativo");
          if (data.variacao_periodo >= 0) {
            indicadorVariacao.innerHTML = '<i class="fas fa-arrow-up"></i> ' + data.variacao_periodo + '%';
            indicadorVariacao.className = 'indicador-valor indicador-positivo';
          } else {
            indicadorVariacao.innerHTML = '<i class="fas fa-arrow-down"></i> ' + Math.abs(data.variacao_periodo) + '%';
            indicadorVariacao.className = 'indicador-valor indicador-negativo';
          }
          
          // Atualizar tabela de unidades
          atualizarTabelaUnidades(data.unidades || []);
          
          // Inicializar gráficos com os dados
          initCharts(data);
        } catch (err) {
          console.error("Erro ao processar dados:", err);
          
          // Verificar se ainda temos os dados mínimos para exibir informações básicas
          if (data.orcamento_total !== undefined && data.executado_total !== undefined) {
            // Atualizar os indicadores básicos
            document.querySelector(".indicador-valor:nth-child(1)").textContent = 
              "R$ " + (data.orcamento_total || 0).toLocaleString("pt-BR");
            document.querySelector(".indicador-valor:nth-child(3)").textContent = 
              "R$ " + (data.executado_total || 0).toLocaleString("pt-BR");
            
            const percentual = data.orcamento_total ? Math.round((data.executado_total / data.orcamento_total) * 100) : 0;
            document.querySelector(".badge.bg-info").textContent = percentual + "%";
          } else {
            // Se nem isso tivermos, carregar dados de backup
            carregarDadosBackup();
          }
          
          // Mostrar uma mensagem de erro mais sutil
          const alertContainer = document.createElement('div');
          alertContainer.className = 'alert alert-warning alert-dismissible fade show';
          alertContainer.innerHTML = `
            <i class="fas fa-exclamation-triangle me-2"></i>
            Alguns dados podem não estar completos. Os gráficos podem estar desatualizados.
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
          `;
          
          // Inserir mensagem acima dos gráficos
          const dashboardGrid = document.querySelector('.dashboard-grid');
          dashboardGrid.insertBefore(alertContainer, dashboardGrid.firstChild);
          
          // Remover a mensagem após 8 segundos
          setTimeout(() => {
            if (document.body.contains(alertContainer)) {
              alertContainer.remove();
            }
          }, 8000);
        }
      })
      .catch(error => {
        console.error("Erro ao carregar dados financeiros:", error);
        
        // Em caso de erro de comunicação, tentar carregar dados de backup silenciosamente
        carregarDadosBackup();
        
        // Mostrar mensagem mais sutil
        const toastContainer = document.createElement('div');
        toastContainer.className = 'position-fixed bottom-0 end-0 p-3';
        toastContainer.style.zIndex = '11';
        toastContainer.innerHTML = `
          <div id="errorToast" class="toast align-items-center text-white bg-warning" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
              <div class="toast-body">
                <i class="fas fa-wifi me-2"></i>
                Os dados financeiros podem estar desatualizados devido a problemas de comunicação.
              </div>
              <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
          </div>
        `;
        document.body.appendChild(toastContainer);
        const toast = new bootstrap.Toast(document.getElementById('errorToast'));
        toast.show();
        
        // Remover o toast após 5 segundos
        setTimeout(() => {
          if (document.body.contains(toastContainer)) {
            document.body.removeChild(toastContainer);
          }
        }, 5000);
      });
  }
  
  function atualizarTabelaUnidades(unidades) {
    const tabelaUnidades = document.getElementById("tabelaUnidades");
    tabelaUnidades.innerHTML = '';
    
    if (!unidades || unidades.length === 0) {
      const row = document.createElement('tr');
      row.innerHTML = `
        <td colspan="5" class="text-center">Nenhum dado disponível</td>
      `;
      tabelaUnidades.appendChild(row);
      return;
    }
    
    unidades.forEach(unidade => {
      const row = document.createElement('tr');
      row.innerHTML = `
        <td>${unidade.nome || '-'}</td>
        <td>R$ ${(unidade.orcamento || 0).toLocaleString("pt-BR")}</td>
        <td>R$ ${(unidade.executado || 0).toLocaleString("pt-BR")}</td>
        <td>${unidade.percentual || 0}%</td>
        <td><span class="badge bg-${unidade.status === 'Adequado' ? 'success' : 'warning'}">${unidade.status || 'N/A'}</span></td>
      `;
      tabelaUnidades.appendChild(row);
    });
  }
  
  function carregarDadosBackup() {
    console.log("Carregando dados de backup");
    
    // Dados estáticos para exibir quando a API falhar
    const dadosBackup = {
      orcamento_total: 2450000,
      executado_total: 1320500,
      variacao_periodo: 12,
      unidades: [
        {
          codigo: "ADM001",
          nome: "Secretaria de Administração",
          orcamento: 620000,
          executado: 420500,
          percentual: 67.8,
          status: "Adequado"
        },
        {
          codigo: "EDU001",
          nome: "Secretaria de Educação",
          orcamento: 980000,
          executado: 560300,
          percentual: 57.2,
          status: "Adequado"
        },
        {
          codigo: "SAU001",
          nome: "Secretaria de Saúde",
          orcamento: 850000,
          executado: 339700,
          percentual: 40.0,
          status: "Atenção"
        }
      ],
      execucao_mensal: [
        {mes: "Jan", orcado: 250000, executado: 200000},
        {mes: "Fev", orcado: 300000, executado: 250000},
        {mes: "Mar", orcado: 350000, executado: 310000},
        {mes: "Abr", orcado: 400000, executado: 380000},
        {mes: "Mai", orcado: 450000, executado: 410000},
        {mes: "Jun", orcado: 500000, executado: 420000}
      ]
    };
    
    console.log("Usando dados de backup para todos os gráficos e tabelas");
    
    // Atualizar indicadores com dados de backup
    document.querySelector(".indicador-valor:nth-child(1)").textContent = 
      "R$ " + dadosBackup.orcamento_total.toLocaleString("pt-BR");
    document.querySelector(".indicador-valor:nth-child(3)").textContent = 
      "R$ " + dadosBackup.executado_total.toLocaleString("pt-BR");
    
    const percentual = Math.round((dadosBackup.executado_total / dadosBackup.orcamento_total) * 100);
    document.querySelector(".badge.bg-info").textContent = percentual + "%";
    
    // Atualizar tabela
    atualizarTabelaUnidades(dadosBackup.unidades);
    
    // Limpar qualquer indicador de carregamento primeiro
    document.querySelectorAll(".chart-container").forEach(container => {
      container.innerHTML = '';
    });
    
    // Inicializar gráficos com pequeno atraso para garantir que o DOM está pronto
    setTimeout(() => {
      initCharts(dadosBackup);
    }, 100);
  }

  function initCharts(data) {
    console.log("Iniciando criação dos gráficos com dados:", data);
    try {
      // Remover qualquer spinner de carregamento antes
      document.querySelectorAll(".chart-container").forEach(container => {
        // Limpar todos os contêineres de gráficos
        container.innerHTML = '';
      });
      
      // Limpar gráficos existentes
      if (window.chartDistribuicao) window.chartDistribuicao.destroy();
      if (window.chartExecucao) window.chartExecucao.destroy();
      
      // Verificar se os dados necessários existem
      if (!data.unidades || !Array.isArray(data.unidades) || data.unidades.length === 0) {
        console.warn("Dados insuficientes para o gráfico de distribuição");
        document.getElementById("chartDistribuicao").innerHTML = 
          '<div class="alert alert-light text-center"><i class="fas fa-chart-pie me-2"></i>Dados de distribuição não disponíveis</div>';
      } else {
        console.log("Criando gráfico de distribuição");
        // Preparar dados para gráfico de distribuição
        const labelsDistribuicao = data.unidades.map(u => u.nome || 'Sem nome');
        const valoresDistribuicao = data.unidades.map(u => u.orcamento || 0);
        
        console.log("Dados do gráfico de distribuição:", {labelsDistribuicao, valoresDistribuicao});
        
        // Gráfico de Distribuição
        const ctxDistribuicao = document
          .getElementById("chartDistribuicao")
          .getContext("2d");
        window.chartDistribuicao = new Chart(ctxDistribuicao, {
          type: "doughnut",
          data: {
            labels: labelsDistribuicao,
            datasets: [
              {
                data: valoresDistribuicao,
                backgroundColor: ["#4e73df", "#1cc88a", "#36b9cc", "#f6c23e", "#e74a3b", "#6f42c1"],
                hoverBackgroundColor: ["#2e59d9", "#17a673", "#2c9faf", "#dda20a", "#be2617", "#5a3a9c"],
                hoverBorderColor: "rgba(234, 236, 244, 1)",
              },
            ],
          },
          options: {
            maintainAspectRatio: false,
            cutout: "70%",
            plugins: {
              legend: {
                position: "bottom",
                display: true
              },
              tooltip: {
                callbacks: {
                  label: function(context) {
                    const value = context.raw;
                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                    const percentage = Math.round((value / total) * 100);
                    return `${context.label}: R$ ${value.toLocaleString('pt-BR')} (${percentage}%)`;
                  }
                }
              }
            },
          },
        });
      }
      
      // Verificar se os dados necessários existem para o gráfico de execução
      if (!data.execucao_mensal || !Array.isArray(data.execucao_mensal) || data.execucao_mensal.length === 0) {
        console.warn("Dados insuficientes para o gráfico de execução");
        
        // Vamos criar dados simulados para o exemplo se não existirem
        data.execucao_mensal = [
          {mes: "Jan", orcado: 250000, executado: 200000},
          {mes: "Fev", orcado: 300000, executado: 250000},
          {mes: "Mar", orcado: 350000, executado: 310000},
          {mes: "Abr", orcado: 400000, executado: 380000},
          {mes: "Mai", orcado: 450000, executado: 410000},
          {mes: "Jun", orcado: 500000, executado: 420000}
        ];
        
        console.log("Usando dados simulados para o gráfico de execução");
      }
      
      console.log("Criando gráfico de execução orçamentária");
      
      // Preparar dados para gráfico de execução
      const labelsExecucao = data.execucao_mensal.map(m => m.mes || 'Sem data');
      const orcadoExecucao = data.execucao_mensal.map(m => m.orcado || 0);
      const executadoExecucao = data.execucao_mensal.map(m => m.executado || 0);
      
      console.log("Dados do gráfico de execução:", {labelsExecucao, orcadoExecucao, executadoExecucao});
      
      // Gráfico de Execução Orçamentária
      const ctxExecucao = document
        .getElementById("chartExecucao")
        .getContext("2d");
      window.chartExecucao = new Chart(ctxExecucao, {
        type: "bar",
        data: {
          labels: labelsExecucao,
          datasets: [
            {
              label: "Orçado",
              backgroundColor: "rgba(78, 115, 223, 0.2)",
              borderColor: "rgba(78, 115, 223, 1)",
              borderWidth: 1,
              data: orcadoExecucao,
            },
            {
              label: "Executado",
              backgroundColor: "rgba(28, 200, 138, 0.2)",
              borderColor: "rgba(28, 200, 138, 1)",
              borderWidth: 1,
              data: executadoExecucao,
            },
          ],
        },
        options: {
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                callback: function (value) {
                  return "R$ " + value.toLocaleString("pt-BR");
                },
              },
            },
          },
          plugins: {
            tooltip: {
              callbacks: {
                label: function(context) {
                  const value = context.raw;
                  return `${context.dataset.label}: R$ ${value.toLocaleString('pt-BR')}`;
                }
              }
            }
          }
        },
      });
      
      // Atualizar a visibilidade dos gráficos
      document.querySelectorAll(".chart-container").forEach(container => {
        // Remover indicador de carregamento se ainda estiver presente
        if (container.querySelector('.spinner-border')) {
          container.innerHTML = '';
        }
      });
      
      console.log("Gráficos criados com sucesso");
      
    } catch (error) {
      console.error("Erro ao inicializar gráficos:", error);
      
      // Em caso de erro, mostrar mensagem sutil nos containers
      document.querySelectorAll(".chart-container").forEach(container => {
        container.innerHTML = `
          <div class="alert alert-warning text-center">
            <i class="fas fa-exclamation-triangle me-2"></i>
            Erro ao carregar visualização: ${error.message}
            <button class="btn btn-sm btn-outline-primary ms-2" onclick="carregarDadosBackup()">
              Tentar novamente
            </button>
          </div>
        `;
      });

      // Tentar inicializar novamente com dados de backup após 2 segundos
      setTimeout(() => {
        carregarDadosBackup();
      }, 2000);
    }
  }

  // Função para carregar organograma financeiro
  function carregarOrganogramaFinanceiro() {
    // Simulação de carregamento
    const container = document.getElementById("organograma-financeiro");
    container.innerHTML = "<div class='text-center'><div class='spinner-border text-primary' role='status'></div><p class='mt-2'>Carregando dados do organograma...</p></div>";
    
    // Aqui seria feita uma chamada AJAX para buscar os dados
    Promise.all([
      fetch("{% url 'organograma_data' %}").then(r => r.ok ? r.json() : Promise.reject('Erro ao carregar dados do organograma')),
      fetch("{% url 'financeira_data' %}").then(r => r.ok ? r.json() : Promise.reject('Erro ao carregar dados financeiros'))
    ])
    .then(([orgData, finData]) => {
      // Renderizar o organograma com os dados financeiros
      container.innerHTML = "<div id='organograma-viz' class='mt-3' style='height: 300px; border: 1px solid #ddd; border-radius: 4px;'></div>";
      
      // Aqui seria implementada a visualização D3 do organograma
      // Versão simplificada para exemplo
      const viz = d3.select("#organograma-viz");
      viz.append("div")
        .attr("class", "p-4")
        .html(`
          <h4>Visualização do Organograma com Dados Financeiros</h4>
          <p>Esta visualização mostra o organograma da instituição com indicadores financeiros em cada nó.</p>
          <div class="row mt-3">
            <div class="col-md-4">
              <div class="card-financial">
                <div class="card-header">Distribuição por Nível</div>
                <div class="card-body">
                  <ul class="list-group">
                    <li class="list-group-item d-flex justify-content-between">
                      <span>Nível Superior</span>
                      <strong>R$ ${(finData.orcamento_total * 0.35).toLocaleString('pt-BR')}</strong>
                    </li>
                    <li class="list-group-item d-flex justify-content-between">
                      <span>Nível Médio</span>
                      <strong>R$ ${(finData.orcamento_total * 0.45).toLocaleString('pt-BR')}</strong>
                    </li>
                    <li class="list-group-item d-flex justify-content-between">
                      <span>Nível Operacional</span>
                      <strong>R$ ${(finData.orcamento_total * 0.20).toLocaleString('pt-BR')}</strong>
                    </li>
                  </ul>
                </div>
              </div>
            </div>
            <div class="col-md-8">
              <div class="organograma-container" style="height: 250px; border: 1px solid #eee; border-radius: 4px; padding: 10px;">
                <!-- Aqui seria renderizado o organograma real -->
                <div style="display: flex; justify-content: center; height: 100%;">
                  <div style="display: flex; flex-direction: column; align-items: center;">
                    <div class="node" style="border: 2px solid #4e73df; padding: 8px; border-radius: 5px; margin-bottom: 10px; background-color: #f8f9fc; width: 180px; text-align: center;">
                      <div>Presidência</div>
                      <small>R$ ${(finData.orcamento_total * 0.10).toLocaleString('pt-BR')}</small>
                    </div>
                    <div style="display: flex; gap: 20px;">
                      <div class="node" style="border: 2px solid #1cc88a; padding: 8px; border-radius: 5px; background-color: #f8f9fc; width: 150px; text-align: center;">
                        <div>Diretoria Adm</div>
                        <small>R$ ${(finData.orcamento_total * 0.25).toLocaleString('pt-BR')}</small>
                      </div>
                      <div class="node" style="border: 2px solid #36b9cc; padding: 8px; border-radius: 5px; background-color: #f8f9fc; width: 150px; text-align: center;">
                        <div>Diretoria Fin</div>
                        <small>R$ ${(finData.orcamento_total * 0.30).toLocaleString('pt-BR')}</small>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        `);
    })
    .catch((error) => {
      container.innerHTML = "<div class='alert alert-danger'>Erro ao carregar dados do organograma: " + error + "</div>";
      
      // Carregar dados de backup em caso de erro
      setTimeout(() => {
        container.innerHTML = "<div id='organograma-viz' class='mt-3' style='height: 300px; border: 1px solid #ddd; border-radius: 4px;'></div>";
        
        const backupOrcamento = 2450000;
        const viz = d3.select("#organograma-viz");
        viz.append("div")
          .attr("class", "p-4")
          .html(`
            <div class="alert alert-warning mb-3"><i class="fas fa-exclamation-triangle me-2"></i>Exibindo dados de backup (servidor indisponível)</div>
            <h4>Visualização do Organograma com Dados Financeiros</h4>
            <p>Esta visualização mostra o organograma da instituição com indicadores financeiros em cada nó.</p>
            <div class="row mt-3">
              <div class="col-md-4">
                <div class="card-financial">
                  <div class="card-header">Distribuição por Nível</div>
                  <div class="card-body">
                    <ul class="list-group">
                      <li class="list-group-item d-flex justify-content-between">
                        <span>Nível Superior</span>
                        <strong>R$ ${(backupOrcamento * 0.35).toLocaleString('pt-BR')}</strong>
                      </li>
                      <li class="list-group-item d-flex justify-content-between">
                        <span>Nível Médio</span>
                        <strong>R$ ${(backupOrcamento * 0.45).toLocaleString('pt-BR')}</strong>
                      </li>
                      <li class="list-group-item d-flex justify-content-between">
                        <span>Nível Operacional</span>
                        <strong>R$ ${(backupOrcamento * 0.20).toLocaleString('pt-BR')}</strong>
                      </li>
                    </ul>
                  </div>
                </div>
              </div>
              <div class="col-md-8">
                <div class="organograma-container" style="height: 250px; border: 1px solid #eee; border-radius: 4px; padding: 10px;">
                  <!-- Dados de backup do organograma -->
                  <div style="display: flex; justify-content: center; height: 100%;">
                    <div style="display: flex; flex-direction: column; align-items: center;">
                      <div class="node" style="border: 2px solid #4e73df; padding: 8px; border-radius: 5px; margin-bottom: 10px; background-color: #f8f9fc; width: 180px; text-align: center;">
                        <div>Presidência</div>
                        <small>R$ ${(backupOrcamento * 0.10).toLocaleString('pt-BR')}</small>
                      </div>
                      <div style="display: flex; gap: 20px;">
                        <div class="node" style="border: 2px solid #1cc88a; padding: 8px; border-radius: 5px; background-color: #f8f9fc; width: 150px; text-align: center;">
                          <div>Diretoria Adm</div>
                          <small>R$ ${(backupOrcamento * 0.25).toLocaleString('pt-BR')}</small>
                        </div>
                        <div class="node" style="border: 2px solid #36b9cc; padding: 8px; border-radius: 5px; background-color: #f8f9fc; width: 150px; text-align: center;">
                          <div>Diretoria Fin</div>
                          <small>R$ ${(backupOrcamento * 0.30).toLocaleString('pt-BR')}</small>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          `);
      }, 1000);
    });
  }

  // Função para simular cenários financeiros (versão alternativa)
  window.simularCenarioFinanceiro = function() {
    console.log("Função simularCenarioFinanceiro chamada");
    
    // Obter elementos e valores
    const cenarioSelect = document.getElementById("cenarioSimulacao");
    const ajusteInput = document.getElementById("ajusteOrcamento");
    const resultadosContainer = document.getElementById("simulacao-resultados");
    
    if (!cenarioSelect || !ajusteInput || !resultadosContainer) {
      alert("Erro: Elementos da página não encontrados. Por favor, recarregue a página.");
      return;
    }
    
    const cenario = cenarioSelect.value;
    const ajuste = parseFloat(ajusteInput.value || 0);
    
    // Mostrar animação de carregamento
    resultadosContainer.innerHTML = `
      <div class="text-center p-4">
        <div class="spinner-border text-primary mb-3" style="width: 3rem; height: 3rem;" role="status"></div>
        <p>Processando simulação para cenário "${cenario}" com ajuste de ${ajuste}%...</p>
      </div>
    `;
    
    // Simular processamento e mostrar resultado
    setTimeout(() => {
      // Valores simulados
      const orcamentoBase = 1850000;
      const valorAjuste = orcamentoBase * ajuste / 100;
      const orcamentoAjustado = orcamentoBase + valorAjuste;
      
      let multiplicadorCenario = 1;
      if (cenario === 'otimizado') multiplicadorCenario = 0.85;
      else if (cenario === 'expandido') multiplicadorCenario = 1.25;
      
      const custoOperacional = orcamentoAjustado * multiplicadorCenario * 0.7;
      const custoAdministrativo = orcamentoAjustado * multiplicadorCenario * 0.3;
      
      // Resultado HTML
      resultadosContainer.innerHTML = `
        <div class="card-financial">
          <div class="card-header">
            <span>Resultados da Simulação - Cenário: ${cenario.charAt(0).toUpperCase() + cenario.slice(1)}</span>
          </div>
          <div class="card-body">
            <div class="alert alert-${ajuste >= 0 ? 'success' : 'warning'}">
              <i class="fas fa-${ajuste >= 0 ? 'chart-line' : 'exclamation-triangle'} me-2"></i>
              ${ajuste >= 0 ? 'Projeção positiva' : 'Atenção aos resultados negativos'}
            </div>
            
            <div class="row">
              <div class="col-md-6">
                <h5>Impacto no Orçamento</h5>
                <ul class="list-group">
                  <li class="list-group-item d-flex justify-content-between align-items-center">
                    Orçamento Base
                    <span>R$ ${orcamentoBase.toLocaleString('pt-BR')}</span>
                  </li>
                  <li class="list-group-item d-flex justify-content-between align-items-center">
                    Ajuste (${ajuste}%)
                    <span>${ajuste >= 0 ? '+' : ''}R$ ${Math.abs(valorAjuste).toLocaleString('pt-BR')}</span>
                  </li>
                  <li class="list-group-item d-flex justify-content-between align-items-center fw-bold">
                    Orçamento Ajustado
                    <span>R$ ${orcamentoAjustado.toLocaleString('pt-BR')}</span>
                  </li>
                </ul>
                
                <h5 class="mt-4">Distribuição</h5>
                <ul class="list-group">
                  <li class="list-group-item d-flex justify-content-between align-items-center">
                    Custo Operacional
                    <span>R$ ${custoOperacional.toLocaleString('pt-BR')}</span>
                  </li>
                  <li class="list-group-item d-flex justify-content-between align-items-center">
                    Custo Administrativo
                    <span>R$ ${custoAdministrativo.toLocaleString('pt-BR')}</span>
                  </li>
                </ul>
              </div>
              
              <div class="col-md-6">
                <h5>Impacto por Cenário</h5>
                <div class="alert alert-info">
                  <strong>${cenario.charAt(0).toUpperCase() + cenario.slice(1)}:</strong> 
                  ${cenario === 'atual' ? 'Mantém a estrutura organizacional atual' : 
                    cenario === 'otimizado' ? 'Reduz custos operacionais em 15%' : 
                    'Aumenta capacidade operacional em 25%'}
                </div>
                
                <div class="progress mb-3" style="height: 25px;">
                  <div class="progress-bar bg-primary" role="progressbar" 
                       style="width: 70%;" 
                       aria-valuenow="70" aria-valuemin="0" aria-valuemax="100">
                    Operacional (70%)
                  </div>
                  <div class="progress-bar bg-info" role="progressbar" 
                       style="width: 30%;" 
                       aria-valuenow="30" aria-valuemin="0" aria-valuemax="100">
                    Adm (30%)
                  </div>
                </div>
                
                <div class="chart-container" style="height: 200px;" id="chartSimulacao"></div>
                
                <p class="text-muted mt-2">
                  <i class="fas fa-info-circle me-1"></i>
                  Simulação baseada em projeções históricas e cenários pré-definidos.
                </p>
              </div>
            </div>
          </div>
        </div>
      `;
      
      // Criar gráfico de comparação
      const ctxSimulacao = document.getElementById("chartSimulacao").getContext("2d");
      
      // Definir dados de comparação entre cenários
      const dadosComparacao = {
        labels: ['Atual', 'Otimizado', 'Expandido'],
        datasets: [{
          label: 'Impacto Orçamentário',
          data: [
            orcamentoBase, 
            orcamentoBase * 0.85, 
            orcamentoBase * 1.25
          ],
          backgroundColor: [
            'rgba(78, 115, 223, 0.5)',
            'rgba(28, 200, 138, 0.5)',
            'rgba(246, 194, 62, 0.5)'
          ],
          borderColor: [
            'rgba(78, 115, 223, 1)',
            'rgba(28, 200, 138, 1)',
            'rgba(246, 194, 62, 1)'
          ],
          borderWidth: 1
        }]
      };
      
      // Destacar o cenário selecionado
      const cenarioIndex = cenario === 'atual' ? 0 : (cenario === 'otimizado' ? 1 : 2);
      const backgroundColors = dadosComparacao.datasets[0].backgroundColor.map((color, index) => 
        index === cenarioIndex ? color.replace('0.5', '0.8') : color
      );
      dadosComparacao.datasets[0].backgroundColor = backgroundColors;
      
      // Criar gráfico
      new Chart(ctxSimulacao, {
        type: 'bar',
        data: dadosComparacao,
        options: {
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                callback: function(value) {
                  return "R$ " + value.toLocaleString("pt-BR", {
                    maximumFractionDigits: 0
                  });
                }
              }
            }
          },
          plugins: {
            legend: {
              display: false
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  const value = context.raw;
                  return `R$ ${value.toLocaleString('pt-BR')}`;
                }
              }
            }
          }
        }
      });
    }, 1500); // Atraso para simular processamento
  };
  
  // Função para exportar dados
  function exportarDados() {
    const formatoContainer = document.createElement('div');
    formatoContainer.className = 'modal';
    formatoContainer.setAttribute('tabindex', '-1');
    formatoContainer.innerHTML = `
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Exportar Relatório Financeiro</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <p>Selecione o formato de exportação:</p>
            <div class="d-grid gap-2">
              <button class="btn btn-outline-primary" onclick="exportarRelatorioCompleto('pdf')">
                <i class="fas fa-file-pdf me-2"></i>PDF
              </button>
              <button class="btn btn-outline-primary" onclick="exportarRelatorioCompleto('csv')">
                <i class="fas fa-file-csv me-2"></i>CSV
              </button>
              <button class="btn btn-outline-primary" onclick="exportarRelatorioCompleto('xlsx')">
                <i class="fas fa-file-excel me-2"></i>Excel (XLSX)
              </button>
              <button class="btn btn-outline-primary" onclick="exportarRelatorioCompleto('html')">
                <i class="fas fa-file-code me-2"></i>HTML
              </button>
            </div>
          </div>
        </div>
      </div>
    `;
    document.body.appendChild(formatoContainer);
    const modal = new bootstrap.Modal(formatoContainer);
    modal.show();
    
    // Remover o modal após fechar
    formatoContainer.addEventListener('hidden.bs.modal', function() {
      document.body.removeChild(formatoContainer);
    });
  }
  
  // Função para exportar relatório completo
  function exportarRelatorioCompleto(formato) {
    // Mostrar indicador de processamento
    const toastContainer = document.createElement('div');
    toastContainer.className = 'position-fixed bottom-0 end-0 p-3';
    toastContainer.style.zIndex = '11';
    toastContainer.innerHTML = `
      <div id="exportToast" class="toast align-items-center text-white bg-primary" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
          <div class="toast-body">
            <i class="fas fa-cog fa-spin me-2"></i>
            Exportando relatório em formato ${formato.toUpperCase()}...
          </div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
      </div>
    `;
    document.body.appendChild(toastContainer);
    const toast = new bootstrap.Toast(document.getElementById('exportToast'));
    toast.show();
    
    // Simular processamento
    setTimeout(() => {
      // Obter período atual
      const periodoAtual = document.getElementById("periodoDropdown").textContent.trim();
      
      // Solicitar download conforme o formato
      fetch(`{% url 'financeira_export' %}?formato=${formato}&periodo=${encodeURIComponent(periodoAtual)}`)
        .then(response => {
          if (formato === 'html') {
            return response.text().then(html => {
              // Criar uma nova janela e inserir o HTML
              const win = window.open('', '_blank');
              win.document.write(html);
              win.document.close();
            });
          } else {
            return response.blob().then(blob => {
              // Criar link para download
              const url = window.URL.createObjectURL(blob);
              const a = document.createElement('a');
              a.href = url;
              a.download = `relatorio_financeiro_${periodoAtual.replace(/\s/g, '_').toLowerCase()}.${formato}`;
              document.body.appendChild(a);
              a.click();
              window.URL.revokeObjectURL(url);
            });
          }
        })
        .catch(error => {
          console.error("Erro ao exportar:", error);
          // Mostrar toast de erro
          document.getElementById('exportToast').classList.remove('bg-primary');
          document.getElementById('exportToast').classList.add('bg-danger');
          document.querySelector('.toast-body').innerHTML = 
            `<i class="fas fa-exclamation-triangle me-2"></i>Erro ao exportar: ${error.message}`;
        })
        .finally(() => {
          // Remover o toast após 3 segundos
          setTimeout(() => {
            document.body.removeChild(toastContainer);
          }, 3000);
        });
    }, 1000);
  }
  
  // Função para exportar resumo financeiro
  function exportarResumo(formato) {
    // Mostrar toast de processamento
    alert(`Exportando resumo financeiro em formato ${formato.toUpperCase()}...`);
    
    // Aqui seria implementada a chamada AJAX para o backend exportar os dados
    const periodoAtual = document.getElementById("periodoDropdown").textContent.trim();
    fetch(`{% url 'financeira_export' %}?componente=resumo&formato=${formato}&periodo=${encodeURIComponent(periodoAtual)}`)
      .then(response => response.blob())
      .then(blob => {
        // Criar link para download
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `resumo_financeiro.${formato}`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
      })
      .catch(error => {
        console.error("Erro ao exportar resumo:", error);
        alert(`Erro ao exportar: ${error.message}`);
      });
  }
  
  // Função para exportar gráficos
  function exportarGrafico(grafico, formato) {
    // Mostrar toast de processamento
    alert(`Exportando gráfico de ${grafico} em formato ${formato.toUpperCase()}...`);
    
    // Para exportar um gráfico como imagem
    if (formato === 'pdf' || formato === 'html') {
      // Obter o canvas do gráfico
      const canvas = document.getElementById(`chart${grafico.charAt(0).toUpperCase() + grafico.slice(1)}`);
      
      if (formato === 'html') {
        // Criar uma nova janela e inserir o HTML com a imagem
        const win = window.open('', '_blank');
        win.document.write(`
          <!DOCTYPE html>
          <html>
          <head>
            <title>Gráfico de ${grafico}</title>
            <style>
              body { font-family: Arial, sans-serif; text-align: center; }
              .container { max-width: 800px; margin: 0 auto; padding: 20px; }
              h1 { color: #4a90e2; }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>Gráfico de ${grafico.charAt(0).toUpperCase() + grafico.slice(1)}</h1>
              <img src="${canvas.toDataURL('image/png')}" alt="Gráfico">
              <p>Gerado em: ${new Date().toLocaleString()}</p>
            </div>
          </body>
          </html>
        `);
        win.document.close();
      } else {
        // Exportar como PDF usando biblioteca externa (simulação)
        alert("Função de exportar PDF será implementada usando biblioteca externa como jsPDF.");
      }
    } else {
      // Para CSV e XLSX, fazer solicitação ao backend
      const periodoAtual = document.getElementById("periodoDropdown").textContent.trim();
      fetch(`{% url 'financeira_export' %}?componente=${grafico}&formato=${formato}&periodo=${encodeURIComponent(periodoAtual)}`)
        .then(response => response.blob())
        .then(blob => {
          // Criar link para download
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = `grafico_${grafico}.${formato}`;
          document.body.appendChild(a);
          a.click();
          window.URL.revokeObjectURL(url);
          document.body.removeChild(a);
        })
        .catch(error => {
          console.error(`Erro ao exportar gráfico de ${grafico}:`, error);
          alert(`Erro ao exportar: ${error.message}`);
        });
    }
  }
  
  // Função para alterar tipo de gráfico
  function alterarTipoGrafico(grafico) {
    const tipos = grafico === 'distribuicao' 
      ? ['doughnut', 'pie', 'bar'] 
      : ['bar', 'line', 'radar'];
    
    const tipoAtual = window[`chart${grafico.charAt(0).toUpperCase() + grafico.slice(1)}`].config.type;
    const index = tipos.indexOf(tipoAtual);
    const novoTipo = tipos[(index + 1) % tipos.length];
    
    // Atualizar o tipo do gráfico
    window[`chart${grafico.charAt(0).toUpperCase() + grafico.slice(1)}`].config.type = novoTipo;
    window[`chart${grafico.charAt(0).toUpperCase() + grafico.slice(1)}`].update();
  }

  // Função para configurar o resumo
  function configurarResumo() {
    alert("Funcionalidade de configuração do resumo será implementada em breve.");
  }
  
  // Implementando a função do botão "Filtrar"
  document.getElementById("btnFiltrar").addEventListener("click", function() {
    // Criar modal com filtros
    const filterModal = document.createElement('div');
    filterModal.className = 'modal fade';
    filterModal.id = 'filterModal';
    filterModal.setAttribute('tabindex', '-1');
    filterModal.innerHTML = `
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Filtrar por Unidade</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="mb-3">
              <label class="form-label">Selecione as unidades:</label>
              <div class="form-check">
                <input class="form-check-input" type="checkbox" id="checkAll" checked>
                <label class="form-check-label" for="checkAll">
                  Selecionar todas
                </label>
              </div>
              <hr>
              <div id="unidadesCheckboxes"></div>
            </div>
            <div class="mb-3">
              <label class="form-label">Status:</label>
              <select class="form-select" id="filterStatus">
                <option value="todos">Todos</option>
                <option value="Adequado">Adequado</option>
                <option value="Atenção">Atenção</option>
                <option value="Crítico">Crítico</option>
              </select>
            </div>
            <div class="mb-3">
              <label class="form-label">Ordenar por:</label>
              <select class="form-select" id="orderBy">
                <option value="nome">Nome</option>
                <option value="orcamento">Orçamento</option>
                <option value="executado">Executado</option>
                <option value="percentual">Percentual</option>
              </select>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
            <button type="button" class="btn btn-primary" id="btnAplicarFiltro">Aplicar</button>
          </div>
        </div>
      </div>
    `;
    document.body.appendChild(filterModal);
    
    // Preencher checkboxes com as unidades
    fetch("{% url 'financeira_data' %}")
      .then(response => response.json())
      .then(data => {
        const unidadesContainer = document.getElementById("unidadesCheckboxes");
        data.unidades.forEach(unidade => {
          const div = document.createElement("div");
          div.className = "form-check";
          div.innerHTML = `
            <input class="form-check-input unidade-check" type="checkbox" id="check_${unidade.codigo}" value="${unidade.codigo}" checked>
            <label class="form-check-label" for="check_${unidade.codigo}">
              ${unidade.nome}
            </label>
          `;
          unidadesContainer.appendChild(div);
        });
        
        // Funcionalidade "selecionar todos"
        document.getElementById("checkAll").addEventListener("change", function() {
          const checks = document.querySelectorAll(".unidade-check");
          checks.forEach(check => check.checked = this.checked);
        });
      });
    
    // Abrir o modal
    const modal = new bootstrap.Modal(document.getElementById('filterModal'));
    modal.show();
    
    // Aplicar filtro
    document.getElementById("btnAplicarFiltro").addEventListener("click", function() {
      // Coletar unidades selecionadas
      const unidadesSelecionadas = Array.from(document.querySelectorAll(".unidade-check:checked"))
        .map(check => check.value);
      
      // Obter outros filtros
      const status = document.getElementById("filterStatus").value;
      const orderBy = document.getElementById("orderBy").value;
      
      // Construir query
      const params = new URLSearchParams();
      params.append('unidades', unidadesSelecionadas.join(','));
      params.append('status', status);
      params.append('orderBy', orderBy);
      
      // Buscar dados filtrados
      fetch(`{% url 'financeira_data' %}?${params.toString()}`)
        .then(response => response.json())
        .then(data => {
          // Atualizar tabela com os dados filtrados
          const tabelaUnidades = document.getElementById("tabelaUnidades");
          tabelaUnidades.innerHTML = '';
          
          data.unidades
            .filter(unidade => 
              (status === 'todos' || unidade.status === status) && 
              unidadesSelecionadas.includes(unidade.codigo)
            )
            .sort((a, b) => {
              if (orderBy === 'nome') return a.nome.localeCompare(b.nome);
              if (orderBy === 'orcamento') return b.orcamento - a.orcamento;
              if (orderBy === 'executado') return b.executado - a.executado;
              if (orderBy === 'percentual') return b.percentual - a.percentual;
              return 0;
            })
            .forEach(unidade => {
              const row = document.createElement('tr');
              row.innerHTML = `
                <td>${unidade.nome}</td>
                <td>R$ ${unidade.orcamento.toLocaleString("pt-BR")}</td>
                <td>R$ ${unidade.executado.toLocaleString("pt-BR")}</td>
                <td>${unidade.percentual}%</td>
                <td><span class="badge bg-${unidade.status === 'Adequado' ? 'success' : 'warning'}">${unidade.status}</span></td>
              `;
              tabelaUnidades.appendChild(row);
            });
          
          // Fechar o modal após aplicar os filtros
          modal.hide();
          
          // Remover o modal do DOM
          setTimeout(() => {
            document.body.removeChild(document.getElementById('filterModal'));
          }, 300);
        })
        .catch(error => {
          console.error("Erro ao filtrar dados:", error);
          alert("Erro ao filtrar dados: " + error.message);
        });
    });
  });

  // Inicializar assim que a pagina carregar
  document.addEventListener('DOMContentLoaded', function() {
    carregarDadosBackup();
  });
</script>
{% endblock %} 