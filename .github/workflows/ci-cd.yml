name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.12'
  DJANGO_SETTINGS_MODULE: 'Nexus.settings'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: nexo_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r nexo_dev/nexo/requirements.txt
        pip install pytest pytest-django coverage flake8 black

    - name: Create .env file for testing
      run: |
        cd nexo_dev/nexo
        cat > .env << EOF
        DEBUG=True
        SECRET_KEY=test-secret-key-for-ci
        DATABASE_URL=postgresql://postgres:postgres@localhost:5432/nexo_test
        ALLOWED_HOSTS=localhost,127.0.0.1
        EOF

    - name: Run linting with flake8
      run: |
        cd nexo_dev/nexo
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with Black
      run: |
        cd nexo_dev/nexo
        black --check --diff .

    - name: Run Django migrations
      run: |
        cd nexo_dev/nexo
        python manage.py migrate --noinput

    - name: Collect static files
      run: |
        cd nexo_dev/nexo
        python manage.py collectstatic --noinput

    - name: Run Django tests with coverage
      run: |
        cd nexo_dev/nexo
        coverage run --source='.' manage.py test
        coverage report
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./nexo_dev/nexo/coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        pip install bandit safety

    - name: Run Bandit security linter
      run: |
        cd nexo_dev/nexo
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium

    - name: Check for known security vulnerabilities
      run: |
        cd nexo_dev/nexo
        safety check --json --output safety-report.json || true
        safety check

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r nexo_dev/nexo/requirements.txt

    - name: Create deployment package
      run: |
        cd nexo_dev/nexo
        # Criar .env de produ√ß√£o (sem valores sens√≠veis)
        cat > .env.production << EOF
        DEBUG=False
        SECRET_KEY=\${{ secrets.SECRET_KEY }}
        DATABASE_URL=\${{ secrets.DATABASE_URL }}
        ALLOWED_HOSTS=\${{ secrets.ALLOWED_HOSTS }}
        EOF
        
        # Coletar arquivos est√°ticos
        python manage.py collectstatic --noinput
        
        # Criar pacote de deployment
        tar -czf ../../nexo-deployment.tar.gz .

    - name: Deploy to staging
      if: github.ref == 'refs/heads/develop'
      run: |
        echo "Deploying to staging environment..."
        # Aqui voc√™ adicionaria o script de deploy para staging

    - name: Deploy to production
      if: github.ref == 'refs/heads/main'
      run: |
        echo "üöÄ Iniciando deploy autom√°tico para produ√ß√£o..."
        
        # Configurar SSH
        mkdir -p ~/.ssh
        echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts
        
        # Testar conex√£o SSH primeiro
        echo "üîç Testando conex√£o SSH..."
        ssh -i ~/.ssh/id_rsa -o ConnectTimeout=10 ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "echo 'SSH conectado com sucesso!'"
        
        # Executar deploy via SSH
        ssh -i ~/.ssh/id_rsa ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOL'
          # Fun√ß√£o para log com timestamp
          log() {
            echo "$(date '+%H:%M:%S') - $1"
          }
          
          # Parar em caso de erro mas com logs
          set -e
          trap 'log "‚ùå ERRO na linha $LINENO"' ERR
          
          log "üöÄ Iniciando deploy autom√°tico..."
          
          # Verificar se diret√≥rio existe
          log "üìÅ Verificando diret√≥rio do reposit√≥rio..."
          if [ ! -d "/home/eduardo/Documentos/nexo/nexo_dev_0001" ]; then
            log "‚ùå Diret√≥rio do reposit√≥rio n√£o encontrado!"
            exit 1
          fi
          
          cd /home/eduardo/Documentos/nexo/nexo_dev_0001
          log "‚úÖ Navegado para: $(pwd)"
          
          # Verificar se √© reposit√≥rio git
          if [ ! -d ".git" ]; then
            log "‚ùå N√£o √© um reposit√≥rio Git!"
            exit 1
          fi
          
          log "üì• Fazendo backup da vers√£o atual..."
          cp -r nexo_dev/nexo ../backup_$(date +%Y%m%d_%H%M%S) || log "‚ö†Ô∏è Backup falhou, continuando..."
          
          log "üîÑ Atualizando c√≥digo do GitHub..."
          git fetch origin || { log "‚ùå git fetch falhou"; exit 1; }
          git reset --hard origin/main || { log "‚ùå git reset falhou"; exit 1; }
          log "‚úÖ C√≥digo atualizado com sucesso"
          
          # Verificar se diret√≥rio Django existe
          log "üìÅ Verificando diret√≥rio Django..."
          if [ ! -d "nexo_dev/nexo" ]; then
            log "‚ùå Diret√≥rio Django n√£o encontrado!"
            exit 1
          fi
          
          cd nexo_dev/nexo
          log "‚úÖ Navegado para Django: $(pwd)"
          
          # Verificar se manage.py existe
          if [ ! -f "manage.py" ]; then
            log "‚ùå manage.py n√£o encontrado!"
            exit 1
          fi
          
          # Verificar se venv existe
          log "üì¶ Verificando ambiente virtual..."
          if [ ! -f "/home/eduardo/Documentos/nexo/venv/bin/activate" ]; then
            log "‚ùå Ambiente virtual n√£o encontrado!"
            exit 1
          fi
          
          source /home/eduardo/Documentos/nexo/venv/bin/activate
          log "‚úÖ Ambiente virtual ativado"
          
          # Verificar requirements.txt
          if [ ! -f "requirements.txt" ]; then
            log "‚ùå requirements.txt n√£o encontrado!"
            exit 1
          fi
          
          log "‚¨áÔ∏è Instalando/atualizando depend√™ncias..."
          pip install -r requirements.txt || { log "‚ùå pip install falhou"; exit 1; }
          log "‚úÖ Depend√™ncias instaladas"
          
          log "üóÉÔ∏è Executando migra√ß√µes do banco..."
          python manage.py migrate --noinput || { log "‚ùå migrate falhou"; exit 1; }
          log "‚úÖ Migra√ß√µes executadas"
          
          log "üìã Coletando arquivos est√°ticos..."
          python manage.py collectstatic --noinput || { log "‚ùå collectstatic falhou"; exit 1; }
          log "‚úÖ Arquivos est√°ticos coletados"
          
          log "üîÑ Reiniciando servi√ßos..."
          sudo systemctl restart gunicorn_nexo || { log "‚ùå restart gunicorn falhou"; exit 1; }
          log "‚úÖ Gunicorn reiniciado"
          
          log "‚è±Ô∏è Aguardando servi√ßo inicializar..."
          sleep 5
          
          log "‚úÖ Verificando status do servi√ßo..."
          if sudo systemctl is-active gunicorn_nexo > /dev/null; then
            log "‚úÖ Gunicorn est√° ativo"
          else
            log "‚ùå Gunicorn n√£o est√° ativo!"
            sudo systemctl status gunicorn_nexo --no-pager -l
            exit 1
          fi
          
          log "üè• Verificando sa√∫de da aplica√ß√£o..."
          if curl -f http://localhost:8000 >/dev/null 2>&1; then
            log "‚úÖ Aplica√ß√£o respondendo em localhost:8000"
          elif curl -f http://127.0.0.1:8000 >/dev/null 2>&1; then
            log "‚úÖ Aplica√ß√£o respondendo em 127.0.0.1:8000"
          else
            log "‚ö†Ô∏è Aplica√ß√£o n√£o responde, mas pode estar inicializando..."
          fi
          
          log "üìä Status final dos servi√ßos..."
          sudo systemctl status gunicorn_nexo --no-pager -l
          
          log "üéâ Deploy conclu√≠do com sucesso!"
        EOL

    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: nexo-deployment
        path: nexo-deployment.tar.gz

  notify:
    runs-on: ubuntu-latest
    needs: [test, security, build-and-deploy]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.build-and-deploy.result == 'success'
      run: |
        echo "üéâ DEPLOY AUTOM√ÅTICO CONCLU√çDO COM SUCESSO!"
        echo "‚úÖ Testes passaram"
        echo "‚úÖ Verifica√ß√µes de seguran√ßa aprovadas"
        echo "‚úÖ Deploy em produ√ß√£o realizado"
        echo "üåê Aplica√ß√£o atualizada e rodando com gunicorn_nexo"
        echo ""
        echo "üìä Pipeline completo executado em: $(date)"
        # Aqui voc√™ pode adicionar notifica√ß√µes (Slack, email, Discord, etc.)

    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.security.result == 'failure' || needs.build-and-deploy.result == 'failure'
      run: |
        echo "‚ùå FALHA NO PIPELINE CI/CD!"
        echo ""
        if [ "${{ needs.test.result }}" = "failure" ]; then
          echo "‚ùå Testes falharam - verificar c√≥digo"
        fi
        if [ "${{ needs.security.result }}" = "failure" ]; then
          echo "‚ùå Verifica√ß√µes de seguran√ßa falharam - vulnerabilidades detectadas"
        fi
        if [ "${{ needs.build-and-deploy.result }}" = "failure" ]; then
          echo "‚ùå Deploy falhou - produ√ß√£o n√£o foi atualizada"
        fi
        echo ""
        echo "üîç Verifique os logs para mais detalhes"
        # Aqui voc√™ pode adicionar notifica√ß√µes de falha urgentes 