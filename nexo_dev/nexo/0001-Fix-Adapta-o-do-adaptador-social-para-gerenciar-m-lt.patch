From f437920fd33970e66e043dfc035f9cbdc4a8d074 Mon Sep 17 00:00:00 2001
From: Seu Nome <seu_email@exemplo.com>
Date: Fri, 21 Mar 2025 12:16:05 -0300
Subject: [PATCH] =?UTF-8?q?Fix:=20Adapta=C3=A7=C3=A3o=20do=20adaptador=20s?=
 =?UTF-8?q?ocial=20para=20gerenciar=20m=C3=BAltiplas=20contas=20com=20mesm?=
 =?UTF-8?q?o=20email?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 README.md        | 81 ++++++++++++++++++++++++++++++++++++++++++++++++
 core/adapters.py | 80 ++++++++++++++++++++++++++++++++++++++++++-----
 2 files changed, 153 insertions(+), 8 deletions(-)
 create mode 100644 README.md

diff --git a/README.md b/README.md
new file mode 100644
index 00000000..1bf944dd
--- /dev/null
+++ b/README.md
@@ -0,0 +1,81 @@
+# Nexo
+
+Este é um projeto Django que utiliza autenticação Google SSO e outras funcionalidades.
+
+## Requisitos
+
+- Python 3.8 ou superior
+- pip (gerenciador de pacotes Python)
+- Ambiente virtual Python (venv)
+
+## Instalação
+
+1. Clone o repositório:
+```bash
+git clone [URL_DO_REPOSITÓRIO]
+cd nexo
+```
+
+2. Crie e ative um ambiente virtual:
+```bash
+# Windows
+python -m venv venv
+.\venv\Scripts\activate
+
+# Linux/MacOS
+python3 -m venv venv
+source venv/bin/activate
+```
+
+3. Instale as dependências:
+```bash
+pip install -r requirements.txt
+```
+
+4. Configure as variáveis de ambiente:
+```bash
+cp .env.example .env
+```
+Edite o arquivo `.env` com suas configurações.
+
+5. Execute as migrações do banco de dados:
+```bash
+python manage.py migrate
+```
+
+6. Inicie o servidor de desenvolvimento:
+```bash
+python manage.py runserver
+```
+
+O servidor estará disponível em `http://localhost:8000`
+
+## Configuração do Google SSO
+
+1. Acesse o [Google Cloud Console](https://console.cloud.google.com)
+2. Crie um novo projeto ou selecione um existente
+3. Ative a API do Google+ e configure as credenciais OAuth
+4. Adicione as credenciais no arquivo `.env`
+
+## Scripts Utilitários
+
+O projeto inclui vários scripts úteis:
+- `clean_db.py`: Limpa o banco de dados
+- `reset_db.py`: Reseta o banco de dados
+- `setup_social_app.py`: Configura a aplicação social
+- `fix_indentation.py`: Corrige a indentação dos arquivos
+- `inspect_db.py`: Inspeciona o banco de dados
+
+## Estrutura do Projeto
+
+- `core/`: Aplicação principal
+- `Nexus/`: Configurações do projeto Django
+- Scripts utilitários na raiz do projeto
+
+## Contribuição
+
+1. Faça um Fork do projeto
+2. Crie uma branch para sua feature (`git checkout -b feature/AmazingFeature`)
+3. Commit suas mudanças (`git commit -m 'Add some AmazingFeature'`)
+4. Push para a branch (`git push origin feature/AmazingFeature`)
+5. Abra um Pull Request 
\ No newline at end of file
diff --git a/core/adapters.py b/core/adapters.py
index 3d03593d..f1dfa9bb 100644
--- a/core/adapters.py
+++ b/core/adapters.py
@@ -3,12 +3,19 @@ from allauth.account.utils import user_email, user_username, user_field
 from django.shortcuts import redirect
 from django.urls import reverse
 import uuid
+from django.contrib.auth import get_user_model
+from allauth.account.models import EmailAddress
+from allauth.exceptions import ImmediateHttpResponse
+from django.contrib.auth import login as auth_login
+from allauth.socialaccount.models import SocialAccount
 
 
 class CustomSocialAccountAdapter(DefaultSocialAccountAdapter):
     """
-    Adaptador personalizado para contornar a tela de signup social
-    e criar automaticamente uma conta com os dados do provedor social.
+    Adaptador personalizado para proporcionar uma experiência de login social fluida:
+    1. Reconhecer usuários que já se cadastraram anteriormente
+    2. Conectar contas sociais a usuários existentes com o mesmo email
+    3. Criar automaticamente uma conta com os dados do provedor social para novos usuários
     """
 
     def pre_social_login(self, request, sociallogin):
@@ -20,24 +27,81 @@ class CustomSocialAccountAdapter(DefaultSocialAccountAdapter):
         if request.user.is_authenticated:
             return
 
-        # Se já existe um usuário com esse email, conecte-o
+        # Obter dados importantes
+        email = user_email(sociallogin.user)
+        provider = sociallogin.account.provider
+        uid = sociallogin.account.uid
+        
+        # Se já existe um usuário com essa conta social, simplesmente conecte-o
         if sociallogin.is_existing:
             return
-
+            
+        # Verificar se já existe um usuário com o mesmo email no sistema
+        if email:
+            # Caso 1: Email já está verificado no sistema
+            try:
+                # Verificar se já existe um endereço de email verificado no sistema
+                existing_email = EmailAddress.objects.get(email__iexact=email, verified=True)
+                if existing_email:
+                    # Conectar esta conta social ao usuário existente
+                    user = existing_email.user
+                    sociallogin.connect(request, user)
+                    # Fazer login imediatamente
+                    sociallogin.user = user
+                    auth_login(request, user, 'django.contrib.auth.backends.ModelBackend')
+                    # Redirecionar para a página inicial
+                    raise ImmediateHttpResponse(redirect('home'))
+            except EmailAddress.DoesNotExist:
+                pass
+            
+            # Caso 2: Existe um usuário com mesmo email, mas não verificado
+            User = get_user_model()
+            try:
+                user = User.objects.get(email__iexact=email)
+                # Se não caiu no caso 1 e encontramos um usuário com mesmo email
+                # Vamos conectar a conta social a este usuário
+                sociallogin.connect(request, user)
+                # Fazer login imediatamente
+                sociallogin.user = user
+                auth_login(request, user, 'django.contrib.auth.backends.ModelBackend')
+                # Marcar email como verificado
+                EmailAddress.objects.get_or_create(user=user, email=email,
+                                              defaults={'verified': True, 'primary': True})
+                # Redirecionar para a página inicial
+                raise ImmediateHttpResponse(redirect('home'))
+            except User.DoesNotExist:
+                pass
+            
         # Se chegamos aqui, é um novo usuário social
         # Vamos criar automaticamente uma conta
         user = sociallogin.user
-
-        # Garantir que temos um nome de usuário válido
+        
+        # Garantir que temos um nome de usuário válido e único
         if not user_username(user):
-            if user_email(user):
-                user_username(user, user_email(user).split("@")[0])
+            if email:
+                base_username = email.split("@")[0]
+                # Verificar se o nome de usuário já existe
+                User = get_user_model()
+                username = base_username
+                counter = 1
+                
+                # Se o nome de usuário já existe, adicionar um sufixo numérico
+                while User.objects.filter(username=username).exists():
+                    username = f"{base_username}_{counter}"
+                    counter += 1
+                
+                user_username(user, username)
             else:
                 # Gerar um nome de usuário aleatório se não houver email
                 user_username(user, f"user_{uuid.uuid4().hex[:10]}")
 
         # Salvar o usuário
         sociallogin.connect(request, user)
+        
+        # Se temos um email, marcar como verificado automaticamente
+        if email:
+            EmailAddress.objects.get_or_create(user=user, email=email,
+                                           defaults={'verified': True, 'primary': True})
 
         # Redirecionar para a página inicial
         # Isso impede que o fluxo normal acesse a tela de signup
-- 
2.49.0.windows.1

