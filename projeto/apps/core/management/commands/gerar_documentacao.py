"""
Comando para gerar documenta√ß√£o do sistema Nexo usando Sphinx.

Este comando oferece funcionalidades CRUD para a documenta√ß√£o:
- CREATE: Gerar nova documenta√ß√£o
- READ: Visualizar documenta√ß√£o existente  
- UPDATE: Atualizar documenta√ß√£o existente
- DELETE: Limpar arquivos de documenta√ß√£o

Uso:
    python manage.py gerar_documentacao --acao create
    python manage.py gerar_documentacao --acao update
    python manage.py gerar_documentacao --acao read --servidor
    python manage.py gerar_documentacao --acao delete
"""
import sphinx
import os
import sys
import subprocess
import shutil
import json
from pathlib import Path
from django.core.management.base import BaseCommand, CommandError
from django.conf import settings
from django.template.loader import render_to_string
from django.apps import apps
from django.db import models
from core.models import *


class Command(BaseCommand):
    help = 'Sistema CRUD para documenta√ß√£o do projeto usando Sphinx'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--acao',
            type=str,
            choices=['create', 'read', 'update', 'delete', 'auto'],
            default='auto',
            help='A√ß√£o a ser executada: create, read, update, delete ou auto'
        )
        
        parser.add_argument(
            '--formato',
            type=str,
            choices=['html', 'pdf', 'epub', 'latex'],
            default='html',
            help='Formato de sa√≠da da documenta√ß√£o'
        )
        
        parser.add_argument(
            '--servidor',
            action='store_true',
            help='Iniciar servidor de desenvolvimento da documenta√ß√£o'
        )
        
        parser.add_argument(
            '--port',
            type=int,
            default=8080,
            help='Porta para o servidor de documenta√ß√£o (padr√£o: 8080)'
        )
        
        parser.add_argument(
            '--watch',
            action='store_true',
            help='Modo watch: recompila automaticamente quando arquivos mudam'
        )
        
        parser.add_argument(
            '--incluir-frontend',
            action='store_true',
            help='Incluir documenta√ß√£o do frontend (JS, CSS, templates)'
        )
        
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='Sa√≠da detalhada'
        )

    def handle(self, *args, **options):
        self.verbosity = 2 if options['verbose'] else 1
        self.docs_path = Path(settings.BASE_DIR) / 'docs'
        self.build_path = self.docs_path / '_build'
        
        try:
            # Verificar se Sphinx est√° instalado
            self._verificar_sphinx()
            
            acao = options['acao']
            
            if acao == 'create':
                self._create_documentacao(options)
            elif acao == 'read':
                self._read_documentacao(options)
            elif acao == 'update':
                self._update_documentacao(options)
            elif acao == 'delete':
                self._delete_documentacao(options)
            elif acao == 'auto':
                self._auto_documentacao(options)
                
        except Exception as e:
            raise CommandError(f'Erro ao executar comando: {str(e)}')

    def _verificar_sphinx(self):
        """Verifica se Sphinx est√° instalado e dispon√≠vel."""
        try:
            import sphinx
            self.stdout.write(
                self.style.SUCCESS(f'‚úì Sphinx {sphinx.__version__} encontrado')
            )
        except ImportError:
            raise CommandError(
                'Sphinx n√£o encontrado. Instale com: pip install -r requirements-docs.txt'
            )

    def _create_documentacao(self, options):
        """CREATE: Gera nova documenta√ß√£o completa."""
        self.stdout.write(
            self.style.WARNING('üìù Criando nova documenta√ß√£o...')
        )
        
        # Criar estrutura de diret√≥rios
        self._criar_estrutura_diretorios()
        
        # Gerar arquivos de documenta√ß√£o autom√°tica
        self._gerar_documentacao_automatica(options)
        
        # Compilar documenta√ß√£o
        self._compilar_documentacao(options['formato'])
        
        self.stdout.write(
            self.style.SUCCESS('‚úÖ Documenta√ß√£o criada com sucesso!')
        )

    def _read_documentacao(self, options):
        """READ: Visualiza documenta√ß√£o existente."""
        if not self.build_path.exists():
            raise CommandError('Documenta√ß√£o n√£o encontrada. Execute com --acao create primeiro.')
        
        if options['servidor']:
            self._abrir_documentacao(options['servidor'], options['port'])
        else:
            # Abrir documenta√ß√£o no browser padr√£o
            import webbrowser
            index_path = self.build_path / 'html' / 'index.html'
            if index_path.exists():
                webbrowser.open(f'file://{index_path.absolute()}')
                self.stdout.write(
                    self.style.SUCCESS('üìñ Documenta√ß√£o aberta no navegador')
                )
            else:
                raise CommandError('Arquivo index.html n√£o encontrado')

    def _update_documentacao(self, options):
        """UPDATE: Atualiza documenta√ß√£o existente."""
        self.stdout.write(
            self.style.WARNING('üîÑ Atualizando documenta√ß√£o...')
        )
        
        if options['watch']:
            self._modo_watch(options)
        else:
            # Gerar documenta√ß√£o autom√°tica atualizada
            self._gerar_documentacao_automatica(options)
            
            # Recompilar
            self._compilar_documentacao(options['formato'])
            
            self.stdout.write(
                self.style.SUCCESS('‚úÖ Documenta√ß√£o atualizada!')
            )

    def _delete_documentacao(self, options):
        """DELETE: Remove arquivos de documenta√ß√£o."""
        self.stdout.write(
            self.style.WARNING('üóëÔ∏è  Removendo documenta√ß√£o...')
        )
        
        if self.build_path.exists():
            shutil.rmtree(self.build_path)
            self.stdout.write(
                self.style.SUCCESS('‚úÖ Arquivos de build removidos')
            )
        
        # Opcionalmente remover arquivos gerados automaticamente
        arquivos_auto = [
            self.docs_path / 'api' / 'auto_models.rst',
            self.docs_path / 'api' / 'auto_views.rst',
            self.docs_path / 'frontend' / 'auto_templates.rst',
        ]
        
        for arquivo in arquivos_auto:
            if arquivo.exists():
                arquivo.unlink()
                self.stdout.write(f'‚úì Removido: {arquivo.name}')

    def _auto_documentacao(self, options):
        """AUTO: Modo autom√°tico - detecta estado e age adequadamente."""
        if not self.docs_path.exists():
            self.stdout.write('üìù Primeira execu√ß√£o - criando documenta√ß√£o...')
            self._create_documentacao(options)
        elif not self.build_path.exists():
            self.stdout.write('üîÑ Build n√£o encontrado - recompilando...')
            self._compilar_documentacao(options['formato'])
        else:
            self.stdout.write('üîÑ Atualizando documenta√ß√£o existente...')
            self._update_documentacao(options)

    def _criar_estrutura_diretorios(self):
        """Cria estrutura de diret√≥rios para documenta√ß√£o."""
        diretorios = [
            self.docs_path,
            self.docs_path / '_static',
            self.docs_path / '_templates',
            self.docs_path / 'api',
            self.docs_path / 'user-guide',
            self.docs_path / 'admin-guide',
            self.docs_path / 'development',
            self.docs_path / 'frontend',
            self.docs_path / 'examples',
        ]
        
        for diretorio in diretorios:
            diretorio.mkdir(parents=True, exist_ok=True)
            if self.verbosity > 1:
                self.stdout.write(f'‚úì Diret√≥rio criado: {diretorio.name}')

    def _gerar_documentacao_automatica(self, options):
        """Gera documenta√ß√£o autom√°tica a partir do c√≥digo."""
        
        # Documenta√ß√£o dos modelos
        self._gerar_doc_modelos()
        
        # Documenta√ß√£o das views
        self._gerar_doc_views()
        
        # Documenta√ß√£o dos forms
        self._gerar_doc_forms()
        
        # Documenta√ß√£o de utilit√°rios
        self._gerar_doc_utils()
        
        if options['incluir_frontend']:
            # Documenta√ß√£o do frontend
            self._gerar_doc_frontend()

    def _gerar_doc_modelos(self):
        """Gera documenta√ß√£o autom√°tica dos modelos Django."""
        modelos = []
        
        for model in apps.get_models():
            if model._meta.app_label == 'core':  # Apenas modelos do app core
                modelos.append({
                    'nome': model.__name__,
                    'modulo': model.__module__,
                    'docstring': model.__doc__ or '',
                    'campos': [field.name for field in model._meta.fields],
                    'verbose_name': getattr(model._meta, 'verbose_name', model.__name__),
                })
        
        conteudo = self._renderizar_template('auto_models.rst', {
            'modelos': modelos,
            'data_geracao': 'now'
        })
        
        arquivo_saida = self.docs_path / 'api' / 'auto_models.rst'
        arquivo_saida.write_text(conteudo, encoding='utf-8')
        
        if self.verbosity > 1:
            self.stdout.write(f'‚úì Gerado: {arquivo_saida.name}')

    def _gerar_doc_views(self):
        """Gera documenta√ß√£o autom√°tica das views."""
        from core import views
        import inspect
        
        views_info = []
        for nome, obj in inspect.getmembers(views):
            if inspect.isfunction(obj) and not nome.startswith('_'):
                views_info.append({
                    'nome': nome,
                    'docstring': obj.__doc__ or '',
                    'assinatura': str(inspect.signature(obj)),
                })
        
        conteudo = self._renderizar_template('auto_views.rst', {
            'views': views_info,
            'data_geracao': 'now'
        })
        
        arquivo_saida = self.docs_path / 'api' / 'auto_views.rst'
        arquivo_saida.write_text(conteudo, encoding='utf-8')

    def _gerar_doc_forms(self):
        """Gera documenta√ß√£o dos formul√°rios."""
        try:
            from core import forms
            import inspect
            
            forms_info = []
            for nome, obj in inspect.getmembers(forms):
                if inspect.isclass(obj) and nome.endswith('Form'):
                    forms_info.append({
                        'nome': nome,
                        'docstring': obj.__doc__ or '',
                        'campos': getattr(obj.base_fields, 'keys', lambda: [])(),
                    })
            
            conteudo = self._renderizar_template('auto_forms.rst', {
                'forms': forms_info,
            })
            
            arquivo_saida = self.docs_path / 'api' / 'auto_forms.rst'
            arquivo_saida.write_text(conteudo, encoding='utf-8')
            
        except ImportError:
            self.stdout.write(
                self.style.WARNING('‚ö†Ô∏è  M√≥dulo forms n√£o encontrado')
            )

    def _gerar_doc_utils(self):
        """Gera documenta√ß√£o dos utilit√°rios."""
        try:
            from core import utils
            import inspect
            
            funcoes = []
            for nome, obj in inspect.getmembers(utils):
                if inspect.isfunction(obj) and not nome.startswith('_'):
                    funcoes.append({
                        'nome': nome,
                        'docstring': obj.__doc__ or '',
                        'assinatura': str(inspect.signature(obj)),
                    })
            
            conteudo = self._renderizar_template('auto_utils.rst', {
                'funcoes': funcoes,
            })
            
            arquivo_saida = self.docs_path / 'api' / 'auto_utils.rst'
            arquivo_saida.write_text(conteudo, encoding='utf-8')
            
        except ImportError:
            self.stdout.write(
                self.style.WARNING('‚ö†Ô∏è  M√≥dulo utils n√£o encontrado')
            )

    def _gerar_doc_frontend(self):
        """Gera documenta√ß√£o do frontend."""
        templates_path = Path(settings.BASE_DIR) / 'core' / 'templates'
        static_path = Path(settings.BASE_DIR) / 'core' / 'static'
        
        # Documentar templates
        templates = []
        if templates_path.exists():
            for template_file in templates_path.rglob('*.html'):
                templates.append({
                    'nome': template_file.name,
                    'caminho': str(template_file.relative_to(templates_path)),
                    'tamanho': template_file.stat().st_size,
                })
        
        # Documentar arquivos CSS
        css_files = []
        if static_path.exists():
            for css_file in static_path.rglob('*.css'):
                css_files.append({
                    'nome': css_file.name,
                    'caminho': str(css_file.relative_to(static_path)),
                    'tamanho': css_file.stat().st_size,
                })
        
        # Documentar arquivos JavaScript
        js_files = []
        if static_path.exists():
            for js_file in static_path.rglob('*.js'):
                js_files.append({
                    'nome': js_file.name,
                    'caminho': str(js_file.relative_to(static_path)),
                    'tamanho': js_file.stat().st_size,
                })
        
        conteudo = self._renderizar_template('auto_frontend.rst', {
            'templates': templates,
            'css_files': css_files,
            'js_files': js_files,
        })
        
        arquivo_saida = self.docs_path / 'frontend' / 'auto_frontend.rst'
        arquivo_saida.write_text(conteudo, encoding='utf-8')

    def _renderizar_template(self, template_name, context):
        """Renderiza template RST com contexto."""
        
        # Renderiza√ß√£o manual para evitar problemas com filtros Django
        if template_name == 'auto_models.rst':
            content = "Modelos (Gerado Automaticamente)\n"
            content += "=================================\n\n"
            content += ".. note::\n   Esta documenta√ß√£o foi gerada automaticamente.\n\n"
            
            for modelo in context.get('modelos', []):
                nome = modelo['nome']
                content += f"{nome}\n"
                content += "-" * len(nome) + "\n\n"
                content += f".. autoclass:: {modelo['modulo']}.{nome}\n"
                content += "   :members:\n"
                content += "   :undoc-members:\n"
                content += "   :show-inheritance:\n\n"
                
                content += "**Campos:**\n\n"
                for campo in modelo['campos']:
                    content += f"* ``{campo}``\n"
                
                content += f"\n**Nome leg√≠vel:** {modelo['verbose_name']}\n\n"
                
                if modelo['docstring']:
                    content += "**Descri√ß√£o:**\n\n"
                    content += f"{modelo['docstring']}\n\n"
            
            return content
            
        elif template_name == 'auto_views.rst':
            content = "Views (Gerado Automaticamente)\n"
            content += "===============================\n\n"
            content += ".. note::\n   Esta documenta√ß√£o foi gerada automaticamente.\n\n"
            
            for view in context.get('views', []):
                nome = view['nome']
                content += f"{nome}\n"
                content += "-" * len(nome) + "\n\n"
                content += f".. autofunction:: core.views.{nome}\n\n"
                
                if view.get('assinatura'):
                    content += f"**Assinatura:** ``{view['assinatura']}``\n\n"
                
                if view.get('docstring'):
                    content += "**Descri√ß√£o:**\n\n"
                    content += f"{view['docstring']}\n\n"
                
                content += "---\n\n"
            
            return content
            
        elif template_name == 'auto_forms.rst':
            content = "Formul√°rios (Gerado Automaticamente)\n"
            content += "=====================================\n\n"
            content += ".. note::\n   Esta documenta√ß√£o foi gerada automaticamente.\n\n"
            
            for form in context.get('forms', []):
                nome = form['nome']
                content += f"{nome}\n"
                content += "-" * len(nome) + "\n\n"
                content += f".. autoclass:: core.forms.{nome}\n"
                content += "   :members:\n"
                content += "   :undoc-members:\n"
                content += "   :show-inheritance:\n\n"
                
                if form.get('docstring'):
                    content += "**Descri√ß√£o:**\n\n"
                    content += f"{form['docstring']}\n\n"
                
                content += "---\n\n"
            
            return content
            
        elif template_name == 'auto_utils.rst':
            content = "Utilit√°rios (Gerado Automaticamente)\n"
            content += "=====================================\n\n"
            content += ".. note::\n   Esta documenta√ß√£o foi gerada automaticamente.\n\n"
            
            for funcao in context.get('funcoes', []):
                nome = funcao['nome']
                content += f"{nome}\n"
                content += "-" * len(nome) + "\n\n"
                content += f".. autofunction:: core.utils.{nome}\n\n"
                
                if funcao.get('assinatura'):
                    content += f"**Assinatura:** ``{funcao['assinatura']}``\n\n"
                
                if funcao.get('docstring'):
                    content += "**Descri√ß√£o:**\n\n"
                    content += f"{funcao['docstring']}\n\n"
                
                content += "---\n\n"
            
            return content
            
        elif template_name == 'auto_frontend.rst':
            content = "Frontend (Gerado Automaticamente)\n"
            content += "==================================\n\n"
            content += ".. note::\n   Esta documenta√ß√£o foi gerada automaticamente.\n\n"
            
            content += "Templates\n"
            content += "---------\n\n"
            for template in context.get('templates', []):
                content += f"* **{template['nome']}** - ``{template['caminho']}`` ({template['tamanho']} bytes)\n"
            
            content += "\nArquivos CSS\n"
            content += "------------\n\n"
            for css in context.get('css_files', []):
                content += f"* **{css['nome']}** - ``{css['caminho']}`` ({css['tamanho']} bytes)\n"
                
            content += "\nArquivos JavaScript\n"
            content += "-------------------\n\n"
            for js in context.get('js_files', []):
                content += f"* **{js['nome']}** - ``{js['caminho']}`` ({js['tamanho']} bytes)\n"
            
            return content
        
        # Fallback para templates n√£o reconhecidos
        return f"# {template_name}\n\nTemplate n√£o implementado ainda."

    def _compilar_documentacao(self, formato='html'):
        """Compila documenta√ß√£o usando Sphinx."""
        self.stdout.write(f'üî® Compilando documenta√ß√£o em formato {formato}...')
        
        # Tentar encontrar sphinx-build
        sphinx_build_cmd = 'sphinx-build'
        
        # No Windows, tentar caminhos alternativos
        import sys
        if sys.platform == 'win32':
            try:
                # Tentar usar o Python atual para executar o m√≥dulo sphinx
                import subprocess
                resultado = subprocess.run([
                    sys.executable, '-m', 'sphinx',
                    '-b', formato,
                    str(self.docs_path),
                    str(self.build_path / formato),
                    '-v' if self.verbosity > 1 else '-q'
                ], capture_output=True, text=True, cwd=settings.BASE_DIR)
                
                if resultado.returncode == 0:
                    self.stdout.write(
                        self.style.SUCCESS(f'‚úÖ Documenta√ß√£o compilada em: {self.build_path / formato}')
                    )
                    if self.verbosity > 1 and resultado.stdout:
                        self.stdout.write(resultado.stdout)
                    return
                else:
                    self.stdout.write(resultado.stderr)
                    
            except Exception as e:
                self.stdout.write(f'Erro ao usar m√≥dulo sphinx: {e}')
        
        # Fallback para comando tradicional
        cmd = [
            sphinx_build_cmd,
            '-b', formato,
            str(self.docs_path),
            str(self.build_path / formato)
        ]
        
        if self.verbosity > 1:
            cmd.extend(['-v'])
        else:
            cmd.extend(['-q'])
        
        try:
            resultado = subprocess.run(
                cmd, 
                capture_output=True, 
                text=True, 
                cwd=settings.BASE_DIR
            )
            
            if resultado.returncode == 0:
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ Documenta√ß√£o compilada em: {self.build_path / formato}')
                )
                if self.verbosity > 1 and resultado.stdout:
                    self.stdout.write(resultado.stdout)
            else:
                raise CommandError(f'Erro na compila√ß√£o:\n{resultado.stderr}')
                
        except FileNotFoundError:
            raise CommandError('sphinx-build n√£o encontrado. Verifique a instala√ß√£o do Sphinx.')

    def _abrir_documentacao(self, servidor=False, port=8000):
        """Abre documenta√ß√£o no navegador."""
        import webbrowser
        import time
        
        if servidor:
            # Iniciar servidor HTTP e abrir navegador
            self.stdout.write('üåê Iniciando servidor HTTP...')
            
            # Verificar se documenta√ß√£o existe
            html_path = self.build_path / 'html'
            if not html_path.exists():
                self.stdout.write(
                    self.style.WARNING('‚ö†Ô∏è Documenta√ß√£o n√£o encontrada. Gerando primeiro...')
                )
                self._compilar_documentacao()
            
            import threading
            import http.server
            import socketserver
            from functools import partial
            
            # Configurar servidor
            os.chdir(html_path)
            handler = partial(http.server.SimpleHTTPRequestHandler)
            
            try:
                with socketserver.TCPServer(("localhost", port), handler) as httpd:
                    url = f"http://localhost:{port}"
                    
                    # Abrir navegador ap√≥s pequena pausa
                    def abrir_navegador():
                        time.sleep(1)  # Esperar servidor inicializar
                        self.stdout.write(f'üöÄ Abrindo documenta√ß√£o em: {url}')
                        webbrowser.open(url)
                    
                    # Abrir navegador em thread separada
                    threading.Thread(target=abrir_navegador, daemon=True).start()
                    
                    self.stdout.write(
                        self.style.SUCCESS(f'‚úÖ Servidor iniciado em: {url}')
                    )
                    self.stdout.write('üìñ Documenta√ß√£o aberta no navegador!')
                    self.stdout.write('‚èπÔ∏è Pressione Ctrl+C para parar o servidor')
                    
                    # Servidor rodando
                    httpd.serve_forever()
                    
            except KeyboardInterrupt:
                self.stdout.write('\nüõë Servidor interrompido pelo usu√°rio')
            except OSError as e:
                if "Address already in use" in str(e):
                    self.stdout.write(
                        self.style.ERROR(f'‚ùå Porta {port} j√° est√° em uso. Tente outra porta.')
                    )
                    # Tentar abrir na porta padr√£o mesmo assim
                    url = f"http://localhost:{port}"
                    self.stdout.write(f'üîó Tentando abrir: {url}')
                    webbrowser.open(url)
                else:
                    raise
            finally:
                # Voltar ao diret√≥rio original
                os.chdir(settings.BASE_DIR)
        else:
            # Apenas abrir arquivo HTML
            html_file = self.build_path / 'html' / 'index.html'
            
            if not html_file.exists():
                self.stdout.write(
                    self.style.WARNING('‚ö†Ô∏è Documenta√ß√£o n√£o encontrada. Gerando primeiro...')
                )
                self._compilar_documentacao()
                
            if html_file.exists():
                file_url = f'file:///{html_file.as_posix()}'
                self.stdout.write(f'üöÄ Abrindo documenta√ß√£o: {file_url}')
                webbrowser.open(file_url)
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ Documenta√ß√£o aberta no navegador!')
                )
            else:
                self.stdout.write(
                    self.style.ERROR('‚ùå N√£o foi poss√≠vel encontrar a documenta√ß√£o.')
                )

    def _modo_watch(self, options):
        """Modo watch: recompila automaticamente quando arquivos mudam."""
        try:
            subprocess.run([
                'sphinx-autobuild',
                str(self.docs_path),
                str(self.build_path / 'html'),
                '--port', str(options['port']),
                '--open-browser'
            ])
        except FileNotFoundError:
            raise CommandError(
                'sphinx-autobuild n√£o encontrado. Instale com: pip install sphinx-autobuild'
            )
        except KeyboardInterrupt:
            self.stdout.write('\nüì¥ Modo watch parado')

    def _gerar_relatorio_cobertura(self):
        """Gera relat√≥rio de cobertura da documenta√ß√£o."""
        try:
            resultado = subprocess.run([
                'sphinx-build',
                '-b', 'coverage',
                str(self.docs_path),
                str(self.build_path / 'coverage')
            ], capture_output=True, text=True)
            
            if resultado.returncode == 0:
                coverage_file = self.build_path / 'coverage' / 'python.txt'
                if coverage_file.exists():
                    self.stdout.write(
                        self.style.SUCCESS('üìä Relat√≥rio de cobertura gerado')
                    )
                    return coverage_file.read_text()
            
        except Exception as e:
            self.stdout.write(
                self.style.WARNING(f'‚ö†Ô∏è  Erro ao gerar relat√≥rio de cobertura: {e}')
            )
        
        return None 